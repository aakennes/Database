
auto UpdateExecutor::Next([[maybe_unused]] Tuple *tuple, RID *rid) -> bool {
  if (is_done_) {
    return false;
  }
  printf("run update\n");
  int32_t row_amount = 0;
  Tuple child_tuple{};
  while (child_executor_->Next(&child_tuple, rid)) {
    /** Delete the tuple in the table */
    auto &table_heap = table_info_->table_;
    TupleMeta tuple_meta{};
    tuple_meta.is_deleted_ = true;
    tuple_meta.ts_ = 0;
    table_heap->UpdateTupleMeta(tuple_meta, *rid);

    /** Update the affected index */
    for (auto &index_info : table_index_) {
      auto &index = index_info->index_;
      printf("delete index %s\n", index_info->name_.c_str());
      index->DeleteEntry(child_tuple.KeyFromTuple(table_info_->schema_, index_info->key_schema_, index->GetKeyAttrs()),
                         *rid, exec_ctx_->GetTransaction());
      printf("delete index %s done\n", index_info->name_.c_str());
    }

    /** Construct to be inserted tuple */
    std::vector<Value> update_values{};
    update_values.reserve(child_executor_->GetOutputSchema().GetColumnCount());
    for (const auto &expr : plan_->target_expressions_) {
      update_values.push_back(expr->Evaluate(&child_tuple, child_executor_->GetOutputSchema()));
    }
    Tuple inserted_tuple = Tuple(update_values, &child_executor_->GetOutputSchema());

    /** Insert tuple into the table. */
    TupleMeta inserted_tuple_meta{};
    inserted_tuple_meta.ts_ = 0;
    inserted_tuple_meta.is_deleted_ = false;
    auto new_rid = table_heap->InsertTuple(inserted_tuple_meta, inserted_tuple, exec_ctx_->GetLockManager(),
                                           exec_ctx_->GetTransaction(), table_info_->oid_);
    if (new_rid == std::nullopt) {
      return false;
    }

    /** Update the affected indexes. */
    for (auto &affected_index : table_index_) {
      affected_index->index_->InsertEntry(inserted_tuple.KeyFromTuple(table_info_->schema_, affected_index->key_schema_,
                                                                      affected_index->index_->GetKeyAttrs()),
                                          new_rid.value(), exec_ctx_->GetTransaction());
    }

    row_amount++;
  }
  auto row_value = Value(INTEGER, row_amount);
  std::vector<Value> output{};
  output.reserve(GetOutputSchema().GetColumnCount());
  output.push_back(row_value);

  *tuple = Tuple{output, &GetOutputSchema()};
  is_done_ = true;

  return true;
}